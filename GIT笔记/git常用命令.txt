
######################################################################################################
$ git config --global user.name "Your Name" 设置用户名
$ git config --global user.email "email@example.com" 设置邮箱
注意：git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。


######################################################################################################
git --version                        查看当前安装的git版本号
git config user.name		     查看当前git用户名称
git config user.email		     查看当前git用户邮箱



######################################################################################################
ls                                   查看当前目录下文件
ls -ah                               查看当前目录下所有文件，包括隐藏文件

######################################################################################################
git init                             初始化一个仓库repository

######################################################################################################
git add XXX资源名                    将资源加入提交队列

######################################################################################################
git commit -m "描述本次修改信息"     将提交队列一次提交，作为一次快照

######################################################################################################
git status                           查看当前仓库下被git管理的资源状态---修改、新增、删除、。。。

######################################################################################################
git diff                             查看所有修改的文件的不同地方，显示详细修改信息

######################################################################################################
git log                              查看提交历史git log命令显示从最近到最远的提交日志需要友情提示的是，你看到的一大串类似1094adb...的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。

git log --pretty=oneline            如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数

######################################################################################################
git reset --hard HEAD^/commit_id版本ID前几位 回退到某个版本
好了，现在我们启动时光穿梭机，准备把readme.txt回退到上一个版本，也就是add distributed的那个版本，怎么做呢？
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令：
$ git reset --hard HEAD^
HEAD is now at e475afc add distributed

最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是1094adb...，于是就可以指定回到未来的某个版本：
$ git reset --hard 1094a
HEAD is now at 83b0afe append GPL


######################################################################################################

git reflog                          查看之前所有的操作
现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog
e475afc HEAD@{1}: reset: moving to HEAD^
1094adb (HEAD -> master) HEAD@{2}: commit: append GPL
e475afc HEAD@{3}: commit: add distributed
eaadf4e HEAD@{4}: commit (initial): wrote a readme file
终于舒了口气，从输出可知，append GPL的commit id是1094adb，现在，你又可以乘坐时光机回到未来了。


######################################################################################################

提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别


######################################################################################################
回退操作：
第一种情况：没commit
1 只在工作区修改了、git checkout -- file               命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。   

2 已经提交到缓存区了、git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本
第一步：git reset HEAD file 把暂存区的修改放回工作区
第二步：git checkout -- file 还原原来修改
 
第二种情况:已经commit
现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把stupid boss提交推送到远程版本库，你就真的惨了…

又到了小结时间。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。



$git reset --hard XXX      回退到XXX提交版本


######################################################################################################

删除资源:将已经commit的资源本地删除
	1、确实要从版本库中删除该文件
		1.1 git rm file 		在git中删除
		1.2 git commit -m ""            提交删除

	2、另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
		git checkout -- file            git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！


######################################################################################################

关联远程仓库：
$git remote add origin git@server-name:path/repo-name.git     关联一个远程库
$git remote rm origin  删除一个远程连接库


要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，--《再把本地提交推送一下就完成了同步》，真是太方便了！

注意：在关联远程仓库后提交push代码前需要先将远程仓库的中代码pull一次！$ git pull --rebase origin master


一、添加远程仓库（本地已经创建了git仓库）
git push                                  推送本地仓库的资源到远程仓库
	git push -u origin master         把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的maste



二、没有本地仓库，从远程库克隆
	在需要克隆远程仓库的文件夹下:git clone git@github.com:michaelliao/XXX.git
	

有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联码云呢？
答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。
使用多个远程库时，我们要注意，git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。
关联两个远程库:github 和 码云
$git remote add github git@github.com:michaelliao/learngit.git
$git remote add gitee git@gitee.com:liaoxuefeng/learngit.git


如果要推送到GitHub，使用命令：
git push github master

如果要推送到码云，使用命令：
git push gitee master

######################################################################################################

参考:https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424
git创建分支
	$ git branch    			查看当前分支
	$ git switch -c XX			创建并切换到分支XX（推荐使用）
	$ git checkout -b XX			创建并切换到分支XX
		$ git switch -c XX			切换分支（推荐使用）	
		$ git checkout XX 			切换分支

	首先，我们创建dev分支，然后切换到dev分支：
	$ git checkout -b dev
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：（1）+（2）
									（1）$ git branch dev
									（2）$ git checkout dev
	然后，用git branch命令查看当前分支：$ git branch
				
	$ git merge XX(分支名)			在当前分支上合并XX分支
	$git merge				命令用于合并指定分支到当前分支
	$ git merge --no-ff -m "merge with no-ff" dev普通模式合并,合并后的历史有分支,能看出来曾经做过合并
		
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast 	forward合并就看不出来曾经做过合并。
	
	$git branch -d XX			删除分支XX
	$git branch -D <name>  			强行删除

注意：在创建分支的时候要将在分支上做的修改放缓存区后提交，不能都留在工作区中，否则所有分支都能可见，注意工作区是实际的磁盘存储空间，缓存区是每个分支的逻辑存储空间，千万注意区别!
	一句话:在磁盘上做的修改操作，在git中要提交到某个分支，然后就做了逻辑存储隔离，只能在该分支中可见，当然可以通过合并分支进行合并!


######################################################################################################

将本地创建的分支push到远程仓库 参考https://blog.csdn.net/hcjsjqjssm/article/details/84558229
	$git push origin branchname    将分支 branchname  push到远程仓库
	$git push -u origin branchname  将修改的提交，后面就可以不加任何参数使用git push了。
	
	$ git push origin :branchname   删除远程主机分支

git从远程仓库中拉取指定分支
	1、若本地分支不存在的情况:
		$git checkout -b 本地分支名称 origin/远程分支名称       使用该方式会在本地新建分x，并自动切换到该本地分支.
	2、git fetch origin 远程分支名称:本地分支名                     使用该方式不会主动切本地分支,只会多建立一个本地分支并和远程分支关联.


######################################################################################################


$ git pull origin branchname			更新远程仓库某个分支代码到本地该分支



######################################################################################################


正在分支上进行工作时，突然来一个任务修复BUG：

先隐藏当前工作：
$ git stash					将当前处理现场储存起来，去处理其他事情，后面恢复后继续在此工作，类似于藏起来！					
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作用，git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug

查看隐藏：
$git stash list 				回到分支查看被隐藏的列表


恢复隐藏两个办法：
	1、一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	2、另一种方式是用git stash pop，恢复的同时把stash内容也删了：


复制特定提交到当前分支:
$git cherry-pick （提交号）4c805e2 能复制一个特定的提交到复制到当前分支


######################################################################################################


删除本地文件后 Git从远程仓库重新获取
	参考https://www.jianshu.com/p/648e2046c5ba
	
	$git fetch --all  
	$git reset --hard origin/master 
	$git pull


######################################################################################################

$ git log 			命令可以显示所有提交过commit的版本信息
$ git log --pretty=oneline      在一行并且只会显示版本号和提交时的备注信息
$ git log --pretty=oneline --abbrev-commit  查看所有提交commit 的日志 （推荐使用）


$ git reflog  	 		查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）


######################################################################################################


git 退出Vim模式 下连按两下大写的ZZ
esc、w、q退出

######################################################################################################

$ git remote 		查看远程仓库
$ git remote -v         显示更详细的信息
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。


######################################################################################################

git打标签
	
$ git tag v1.0   将当前分支打一个标签名v1.0
$ git tag        查看所有标签
$ git show v0.9  查看标签v0.9 详细信息

默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？

方法是找到历史提交的commit id，然后打上就可以了：
$ git tag v0.9 f52c633


$ git tag -a v0.1 -m "version 0.1 released" 1094adb   还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字


$ git tag -d v0.1  删除标签
$ git push origin v1.0   推送标签到远程服务器
$ git push origin --tags 一次性推送全部尚未推送到远程的本地标签


如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除
$ git tag -d v0.9
$ git push origin :refs/tags/v0.9

######################################################################################################

忽略特殊文件

	有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。

好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore


$touch .gitignore		windows下创建.gitignore文件

######################################################################################################

git配置别名：
$ git config --global alias.co “checkout”

以后敲$git co就代表了$git checkout

如：
$git config --global alias.logcomit "log --pretty=oneline --abbrev-commit" 将查看所有提交日志配成git logcomit


配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
	别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

######################################################################################################

搭建自己的远程仓库：
	准备：一台装有Linux系统的主机

	第一步，安装git：$ sudo apt-get install git
	第二步，创建一个git用户，用来运行git服务：$ sudo adduser git





######################################################################################################



